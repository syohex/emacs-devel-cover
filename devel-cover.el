;;; devel-cover.el --- highlight line C0 lines with Devel::Cover

;; Copyright (C) 2013 by Syohei YOSHIDA

;; Author: Syohei YOSHIDA <syohex@gmail.com>
;; URL: https://github.com/syohex/emacs-devel-cover
;; Version: 0.01

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;;
;; Highlight C0 line by html generated by Devel::Cover

;;; Code:

(eval-when-compile
  (require 'cl))

(defgroup devel-cover nil
  "Highligh C0 lines"
  :group 'perl)

(defface devel-cover-c0-line
  '((t (:underline "red")))
  "Face of c0 line"
  :group 'devel-cover)

(defun devel-cover--collect-c0 (nodes)
  (let* ((body-node (assoc-default 'body (cdr nodes)))
         (table-node (nth 7 body-node)))
    (loop for node in (cdddr table-node)
          for statement-info = (cadddr node)
          for class = (assoc-default 'class (cadr (caddr statement-info)))
          when (string= class "c0")
          collect (string-to-number (car (last (caddr node)))))))

(defun devel-cover--parse-html (html)
  (with-temp-buffer
    (insert-file-contents-literally html)
    (libxml-parse-html-region (point-min) (point-max))))

(defun devel-cover--match-html (db-dir target)
  (let ((htmls (directory-files db-dir t "\\.html\\'"))
        (pattern (concat target ".html")))
    (loop for html in htmls
          when (string-match pattern html)
          return html)))

(defun devel-cover--search-db-directory (basedir)
  (let ((db-dir (locate-dominating-file basedir "cover_db")))
    (if db-dir
        (concat db-dir "cover_db/")
      (read-directory-name "DB Directory: " nil))))

(defun devel-cover--package-name (curfile)
  (let ((file-path (expand-file-name curfile)))
    (when (string-match "lib/\\(.+\\)\.pm\\'" file-path)
      (concat (replace-regexp-in-string "/" "-" (match-string 1 file-path))
              "-pm"))))

(defun devel-cover--highlight-lines (lines)
  (save-excursion
    (goto-char (point-min))
    (dolist (line lines t)
      (forward-line (- line (line-number-at-pos)))
      (let ((ov (make-overlay (point) (line-end-position))))
        (overlay-put ov 'face 'devel-cover-c0-line)
        (overlay-put ov 'devel-cover t)))))

;;;###autoload
(defun devel-cover-highlight-c0-lines ()
  (interactive)
  (let* ((target (devel-cover--package-name (buffer-file-name)))
         (db-dir (devel-cover--search-db-directory default-directory))
         (html (devel-cover--match-html db-dir target))
         (nodes (devel-cover--parse-html html))
         (lines (devel-cover--collect-c0 nodes)))
    (devel-cover--highlight-lines lines)))

;;;###autoload
(defun devel-cover-unhighlight (beg end)
  (interactive "r")
  (remove-overlays beg end 'devel-cover t))

;;;###autoload
(defun devel-cover-unhighlight ()
  (interactive)
  (devel-cover-unhighlight-region (point-min) (point-max)))

(provide 'devel-cover)

;;; devel-cover.el ends here
